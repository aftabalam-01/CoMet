generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
//  USER MODEL
//
model User {
  id                   String       @id @default(uuid())
  name                 String
  image                String?
  email                String       @unique
  phone                String
  password             String
  refreshToken         String?
  passwordResetToken   String?      @db.VarChar(255)
  passwordResetExpires DateTime?
  role                 Role         @default(STAFF)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  OrderBatch           OrderBatch[]
  Transport            Transport[]
  Order                Order[]
  Client               Client?
  AuditLog             AuditLog[]
}

enum Role {
  ADMIN
  STAFF
  CLIENT
}

//
//  SHOP MODEL
//
model Client {
  userId     String    @unique
  name       String
  logo       String?
  totalBoxes Int?
  billAmount Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Relations
  User     User            @relation(fields: [userId], references: [id])
  Orders   Order[]
  Contacts ContactPerson[]
}

//
//  TRANSPORT MODEL
//
model Transport {
  id         String    @id @default(uuid())
  image      String?
  name       String
  phone      String    @unique
  email      String    @unique
  totalBoxes Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  CreatedBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // Relations
  Orders         Order[]
  contacts       ContactPerson[]
  OrderTransport OrderTransport[]
}

//
//  CONTACT PERSONS
//
model ContactPerson {
  id          String     @id @default(uuid())
  transportId String?
  clientId    String?
  name        String
  phone       String
  email       String?
  Client      Client?    @relation(fields: [clientId], references: [userId])
  Transport   Transport? @relation(fields: [transportId], references: [id])
}

//
//  ORDER MODEL
//
model Order {
  id           String    @id @default(uuid())
  clientId     String
  orderBatchId String?
  orderNumber  String    @unique // human-friendly order code
  transportId  String?
  createdById  String?
  boxes        Int
  note         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  Client Client @relation(fields: [clientId], references: [userId])

  CreatedBy User? @relation(fields: [createdById], references: [id])

  deliveryStatus DeliveryStatus @default(PENDING)
  OrderBatch     OrderBatch?    @relation(fields: [orderBatchId], references: [id])

  // Relations
  Invoices       Invoice?
  Payments       PaymentTransaction?
  Transport      Transport?          @relation(fields: [transportId], references: [id])
  OrderTransport OrderTransport?

  @@index([clientId, createdAt])
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

//
//  ORDER BATCH (daily grouping)
//
model OrderBatch {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  // Relations
  orders Order[]
}

//
//  ORDER <-> TRANSPORT JOIN MODEL
//
model OrderTransport {
  id          String   @id @default(uuid())
  transportId String
  orderId     String   @unique
  assignedAt  DateTime @default(now())

  Transport Transport @relation(fields: [transportId], references: [id])
  Order     Order     @relation(fields: [orderId], references: [id])

  @@unique([orderId, transportId]) // prevents duplicate assignment
}

//
//  INVOICE MODEL
//
model Invoice {
  id        String   @id @default(uuid())
  orderId   String   @unique
  invoiceNo String   @unique
  amount    Int?
  image     String?
  issuedAt  DateTime @default(now())
  paid      Boolean  @default(false)

  Order Order @relation(fields: [orderId], references: [id])
}

//
//  PAYMENTS (support multiple per order, refunds, gateways)
//
model PaymentTransaction {
  id            String        @id @default(uuid())
  orderId       String        @unique
  amount        Int?
  method        String? // UPI, COD, Razorpay, etc.
  transactionId String? // Gateway ID
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())

  Order Order @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

//
//  AUDIT LOGS
//
model AuditLog {
  id        String   @id @default(uuid())
  entity    String? // e.g. "Order"
  userId    String?
  entityId  String?
  action    String? // e.g. "CREATE", "UPDATE_STATUS"
  oldValue  Json?
  newValue  Json?
  createdAt DateTime @default(now())

  User User? @relation(fields: [userId], references: [id])
}
